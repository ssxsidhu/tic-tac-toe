import Head from 'next/head';
import { useState, useEffect } from 'react'
import GridSvg from '../public/grid.svg'

const WINNING_COMBO = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6],
];

const intialState = {
  iXTurn: true,
  iWon: false,
  iIsDraw: false,
  iWonCombo: [],
  iModalTitle: "",
  iBoardData: Array(9).fill(null)
}


export default function Home() {

  const [xTurn, setXTurn] = useState(intialState.iXTurn);
  const [won, setWon] = useState(intialState.iWon);
  const [isDraw, setIsDraw] = useState(intialState.iIsDraw);
  const [wonCombo, setWonCombo] = useState(intialState.iWonCombo);
  const [modalTitle, setModalTitle] = useState(intialState.iModalTitle);
  const [boardData, setBoardData] = useState(intialState.iBoardData);

  useEffect(() => {
    checkWinner();
    checkDraw();
  }, [boardData]);

  const reset = () => {
    setBoardData(intialState.iBoardData)
    setXTurn(intialState.iXTurn);
    setWon(intialState.iWon);
    setWonCombo(intialState.iWonCombo);
    setIsDraw(intialState.iIsDraw);
    setModalTitle(intialState.iModalTitle);
  };

  const updateBoardData = (idx) => {
    if (!boardData[idx]) {
      let value = xTurn === true ? "X" : "O";
      setBoardData({ ...boardData, [idx]: value });
      setXTurn(!xTurn);
    }
  }

  const checkDraw = () => {
    let check = Object.keys(boardData).every((v) => boardData[v]);
    setIsDraw(check);
    if (check) setModalTitle("Match Draw!!!");
  };


  const checkWinner = () => {
    WINNING_COMBO.map((bd) => {
      const [a, b, c] = bd;
      if (
        boardData[a] &&
        boardData[a] === boardData[b] &&
        boardData[a] === boardData[c]
      ) {
        setWon(true);
        setWonCombo([a, b, c]);
        setModalTitle(`Player ${!xTurn ? "X" : "O"} Won!!!`);
        return;
      }
    });
  };
  
  return (
    <div>
      <Head>
        <title>
          Tic-Tac-Toe
        </title>
      </Head>
      <h1>Tic Tac Toe</h1>
      <div className='game'>
        <div className='game_menu'>
          <p>{xTurn ? "X Turn" : "O Turn"}</p>
        </div> 
        <GridSvg className={`svg_board`}/>
        <div className={`game_board`}>
          {[...Array(9)].map((v, idx) => (
            <Square
              key={idx}
              value={boardData[idx]}
              onClick={() => updateBoardData(idx)}
              highlight={wonCombo.includes(idx)}
            />
          ))}
        </div>
      </div>
      <div className={`overlay ${modalTitle ? "show" : ""}`}></div>
      <div className={`modal ${modalTitle ? "show" : ""}`}>
        <div className="modal_title">{modalTitle}</div>
        <button onClick={reset}>New Game</button>
      </div>



      {/* <svg className='svg_board' viewBox="0 0 1080 2130">
        <g id="layer1">
        <g >
          <path d="M174.27417,564.0L174.27417,564.0L918.1355,564.001C920.8969,564.001,923.1355,566.23956,923.1355,569.001L923.1355,569.001L923.1355,1312.8613C923.1355,1315.6228,920.8969,1317.8613,918.1355,1317.8613L918.1355,1317.8613L174.27417,1317.8623C172.94809,1317.8623,171.67632,1317.3354,170.73863,1316.3978C169.80095,1315.4602,169.27417,1314.1884,169.27417,1312.8623L169.27417,1312.8623L169.27417,569.0C169.27417,567.6739,169.80095,566.40216,170.73863,565.4645C171.67632,564.5268,172.94809,564.0,174.27417,564.0L174.27417,564.0 M174.27417,574.0L179.27417,569.0L179.27417,1312.8623L174.27417,1307.8623L918.1355,1307.8613L913.1355,1312.8613L913.1355,569.001L918.1355,574.001L174.27417,574.0 Z"></path></g>
        <g >
          <path d="M410.737,568.6907L410.737,568.6907L410.737,909.06494L410.737,909.0649L410.73706,914.8238L410.73706,914.833L410.00775,1314.0044C410.00272,1316.7659,407.76004,1319.0002,404.99863,1318.9952C402.2372,1318.9902,400.00272,1316.7476,400.00775,1313.9861L400.00775,1313.9861L400.73706,914.8147L400.73706,914.8239L400.737,909.065L400.737,909.06494L400.737,568.6907C400.737,565.92926,402.9756,563.6907,405.737,563.6907C408.4984,563.6907,410.737,565.92926,410.737,568.6907 Z"></path></g>
        <g >
          <path d="M681.2497,573.699L681.2497,573.699L677.31793,1315.2451C677.3033,1318.0065,675.0529,1320.2332,672.2915,1320.2185C669.5301,1320.2039,667.3034,1317.9535,667.31805,1315.1921L667.31805,1315.1921L671.2498,573.646C671.26447,570.8846,673.51483,568.6579,676.27625,568.67255C679.03766,568.6872,681.26434,570.93756,681.2497,573.699 Z"></path></g>
        <g >
          <path d="M175.73741,783.0248C172.97615,783.0248,170.73766,785.2631,170.73741,788.02435C170.73717,790.7856,172.97528,793.0243,175.73654,793.0248L181.38661,793.02576C181.38692,793.02576,181.3872,793.02576,181.38751,793.02576C181.42087,793.02576,181.45415,793.02545,181.48734,793.0248L910.333,793.0248C913.0944,793.0248,915.333,790.7862,915.333,788.0248C915.333,785.26337,913.0944,783.0248,910.333,783.0248 Z"></path></g>
        <g>
          <path d="M920.0282,1066.2013L920.0282,1066.2013C768.5025,1066.9105,547.0313,1064.112,546.7604,1064.1086L546.82434,1064.109L546.8241,1064.109L546.8241,1064.109C377.45767,1064.109,221.94199,1061.9369,181.59583,1061.3267L181.55246,1061.3258L174.9777,1061.1693C172.21707,1061.1036,170.0324,1058.8124,170.0981,1056.0518C170.1638,1053.2911,172.45502,1051.1066,175.21565,1051.1722L175.21565,1051.1722L181.7904,1051.3287L181.74704,1051.3279C222.07169,1051.9377,377.53125,1054.109,546.8241,1054.109L546.8241,1054.109L546.82434,1054.109L546.8883,1054.1094C547.189,1054.1133,768.53705,1056.9102,919.98145,1056.2013C922.74286,1056.1884,924.9918,1058.4165,925.00476,1061.1779C925.0177,1063.9392,922.7896,1066.1884,920.0282,1066.2013 Z"></path></g>
      </g>
      </svg> */}

      {/* <svg width="1080px" height="2130px" viewBox="0 0 1080 2130">
        <g id="layer1">
          <g fill='none' fill-opacity='1.0' stroke-linejoin='milter' >
            <path d="M174.27417,564.0L174.27417,564.0L918.1355,564.001C920.8969,564.001,923.1355,566.23956,923.1355,569.001L923.1355,569.001L923.1355,1312.8613C923.1355,1315.6228,920.8969,1317.8613,918.1355,1317.8613L918.1355,1317.8613L174.27417,1317.8623C172.94809,1317.8623,171.67632,1317.3354,170.73863,1316.3978C169.80095,1315.4602,169.27417,1314.1884,169.27417,1312.8623L169.27417,1312.8623L169.27417,569.0C169.27417,567.6739,169.80095,566.40216,170.73863,565.4645C171.67632,564.5268,172.94809,564.0,174.27417,564.0L174.27417,564.0 M174.27417,574.0L179.27417,569.0L179.27417,1312.8623L174.27417,1307.8623L918.1355,1307.8613L913.1355,1312.8613L913.1355,569.001L918.1355,574.001L174.27417,574.0 Z" />
          </g>
          <g fill='none' fill-opacity='1.0' stroke-linejoin='miter'>
            <path d="M410.737,568.6907L410.737,568.6907L410.737,909.06494L410.737,909.0649L410.73706,914.8238L410.73706,914.833L410.00775,1314.0044C410.00272,1316.7659,407.76004,1319.0002,404.99863,1318.9952C402.2372,1318.9902,400.00272,1316.7476,400.00775,1313.9861L400.00775,1313.9861L400.73706,914.8147L400.73706,914.8239L400.737,909.065L400.737,909.06494L400.737,568.6907C400.737,565.92926,402.9756,563.6907,405.737,563.6907C408.4984,563.6907,410.737,565.92926,410.737,568.6907 Z" />
          </g>
          <g fill='none' fill-opacity='1.0' stroke-linejoin='miter'>
            <path d="M681.2497,573.699L681.2497,573.699L677.31793,1315.2451C677.3033,1318.0065,675.0529,1320.2332,672.2915,1320.2185C669.5301,1320.2039,667.3034,1317.9535,667.31805,1315.1921L667.31805,1315.1921L671.2498,573.646C671.26447,570.8846,673.51483,568.6579,676.27625,568.67255C679.03766,568.6872,681.26434,570.93756,681.2497,573.699 Z" />
          </g>
          <g fill='none' fill-opacity='1.0' stroke-linejoin='miter'>
            <path d="M175.73741,783.0248C172.97615,783.0248,170.73766,785.2631,170.73741,788.02435C170.73717,790.7856,172.97528,793.0243,175.73654,793.0248L181.38661,793.02576C181.38692,793.02576,181.3872,793.02576,181.38751,793.02576C181.42087,793.02576,181.45415,793.02545,181.48734,793.0248L910.333,793.0248C913.0944,793.0248,915.333,790.7862,915.333,788.0248C915.333,785.26337,913.0944,783.0248,910.333,783.0248 Z" />
          </g>
          <g fill='none' fill-opacity='1.0' stroke-linejoin='miter'>
            <path d="M920.0282,1066.2013L920.0282,1066.2013C768.5025,1066.9105,547.0313,1064.112,546.7604,1064.1086L546.82434,1064.109L546.8241,1064.109L546.8241,1064.109C377.45767,1064.109,221.94199,1061.9369,181.59583,1061.3267L181.55246,1061.3258L174.9777,1061.1693C172.21707,1061.1036,170.0324,1058.8124,170.0981,1056.0518C170.1638,1053.2911,172.45502,1051.1066,175.21565,1051.1722L175.21565,1051.1722L181.7904,1051.3287L181.74704,1051.3279C222.07169,1051.9377,377.53125,1054.109,546.8241,1054.109L546.8241,1054.109L546.82434,1054.109L546.8883,1054.1094C547.189,1054.1133,768.53705,1056.9102,919.98145,1056.2013C922.74286,1056.1884,924.9918,1058.4165,925.00476,1061.1779C925.0177,1063.9392,922.7896,1066.1884,920.0282,1066.2013 Z" />
          </g>
        </g>
      </svg> */}





      {/* <svg fill="none" class="line-drawing" id="mac" width="100%" height="600" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 600">
							<path d="M 257.85024,158.16843 754.90716,35.953537 731.06035,405.57906 228.78695,448.8014 z" stroke-dasharray="1678.47, 1678.47" stroke-dashoffset="0"></path> 
							<path d="m 259.83736,136.30872 c 0,0 -6.74232,0.97288 -11.61303,5.46502 -3.96751,3.659 -6.12527,9.40831 -7.01729,20.86596 l -36.5158,346.77284 c 0,0 -3.47753,13.41382 10.68151,14.15903 l 517.67468,-21.11485 c 0,0 18.38216,0.74522 19.87257,-19.62369 L 784.07068,11.384991 c 0,0 0.059,-13.07475 -23.20111,-7.2266959 L 259.83736,136.30872 z" stroke-dasharray=" 1972.67, 1972.67" stroke-dashoffset="0"></path> 
							<path d="m 211.29271,522.89381 c 0,0 12.5259,6.63947 19.72988,5.64573 l 513.45197,-19.12737 c 0,0 18.87884,0.74557 21.61112,-18.87848 l 29.5596,-462.528221 c 0,0 1.49047,-10.184447 -13.54272,-21.4997553" stroke-dasharray="1056.02, 1056.02" stroke-dashoffset="0"></path> 
							<path d="M 208.59466,472.34637 756.27723,432.02629" stroke-dasharray="549.165, 549.165" stroke-dashoffset="0"></path> 
							<path d="m 591.36015,515.11602 11.15099,41.36862 c 0,0 8.62435,33.16197 -11.15099,33.16197 l -55.35924,4.26821 c 0,0 -9.65275,0.58387 -13.08781,0.58387 -1.35069,0 -5.16991,0.0265 -5.16991,0.0265 l -149.57016,-0.0347 c 0,0 -1.45726,0.12035 -1.52173,-0.0853 -0.14195,-0.4531 1.2173,-0.44973 1.2173,-0.44973 l 93.42473,-4.68143 c 0,0 23.85536,1.49042 23.85127,-27.57288 l -2.70885,-42.52741" stroke-dasharray="487.13, 487.13" stroke-dashoffset="0"></path> 
							<path d="m 595.82547,514.94947 11.52956,43.3982 c 0,0 8.23944,32.78936 -11.52956,38.00586 h -58.52044 l -12.10971,0.99374 -16.58099,-0.61332 -128.7355,0.17849 c 0,0 -10.74373,-0.45795 -13.22753,-2.50727" stroke-dasharray="318.352, 318.352" stroke-dashoffset="0"></path> 
							<path d="m 486.38703,90.292617 c -0.3846,2.126175 -1.9686,3.619643 -3.5379,3.335758 -1.5693,-0.283875 -2.5297,-2.237606 -2.1451,-4.363775 0.38461,-2.12617 1.96859,-3.619642 3.53789,-3.335762 1.56931,0.283879 2.52971,2.23761 2.14511,4.363779 z" stroke-dasharray="21.487, 21.487" stroke-dashoffset="0"></path> 
							<path d="m 483.95449,571.8934 120.41968,0" stroke-dasharray="120.42, 120.42" stroke-dashoffset="0"></path> 
							<path class="line-round" d="m 783.49986,166.74023 -9.12881,133.48624" stroke-dasharray=" 133.798, 133.798" stroke-dashoffset="0"></path> 
							<path class="line-round" d="m 773.91008,309.26031 -1.81646,29.43591" stroke-dasharray=" 29.4919, 29.4919" stroke-dashoffset="0"></path>
						</svg> */}
    </div >

  )
}

function Square(props) {
  return (
    <div
      className={
        `square ${props.highlight ? "highlight" : ""
        }`}
      onClick={() => { props.onClick() }}>
      {props.value}
    </div>
  )
}



